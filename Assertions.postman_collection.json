{
	"info": {
		"_postman_id": "9d6d7846-b9d5-432c-80f7-b93cfd022604",
		"name": "Assertions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Sample-Assertions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "045da2d8-f6cb-4e25-8444-b091befcea37",
						"exec": [
							"",
							"// if (",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//{ return \"true\";",
							"",
							"// }",
							"// else {",
							"//   return \"false\";",
							"// }",
							"",
							"",
							"",
							"pm.test(\"termReasonDescription Value\", function () {",
							"    var jsonData = pm.response.json();",
							"    console.log(jsonData.result.locations[0].practitionerNetworkCycle.network.agreement[0].termReasonDescription);",
							"    pm.expect(jsonData.result.locations[0].practitionerNetworkCycle.network.agreement[0].termReasonDescription).to.eql(\"No Select Hospital Privileges\")",
							"});",
							"",
							"pm.test(\"agreement Type Value\", function () {",
							"    var jsonData = pm.response.json();",
							"    //console.log(jsonData.result.locations[1].practitionerNetworkCycle.network.agreement[1].agreementType);",
							"    console.log(jsonData.result.locations[0].practitionerNetworkCycle.network.agreement[0].agreementType);",
							"    pm.expect(jsonData.result.locations[0].practitionerNetworkCycle.network.agreement[0].agreementType).to.eql(\"In Network\");",
							"});",
							"",
							"",
							"// pm.test(\"122\", function () { ",
							"//    pm.expect(jsonData.locations[0].networkLocationCycles[0].taxonomies[0]=[[\"primary\", \"207LP3000X\"],[\"taxonomy2\", \"101YA0400X\"],[\"taxonomy3\", \"101YM0800X\"]]);",
							"//    //console.log(jsonData.locations[0].networkLocationCycles[0].taxonomies[0]=[[\"primary\", \"207LP3000X\"],[\"taxonomy2\", \"101YA0400X\"],[\"taxonomy3\", \"101YM0800X\"]]);",
							"//       // console.log(jsonData.locations[0].networkLocationCycles[0].taxonomies[0][[\"primary\",\"taxonomy2\",\"taxonomy3\",\"taxonomy4\",\"taxonomy5\",\"taxonomy6\",\"taxonomy7\",\"taxonomy8\",\"taxonomy9\",\"taxonomy10\"]]",
							"//       // =[[\"207LP3000X\",\"101YA0400X\",\"101YM0800X\",\"101YP1600X\",\"101YP2500X\",\"taxonomy6\",\"102L00000X\",\"taxonomy8\",\"103G00000X\",\"103GC0700X\"]]); ",
							"//       });",
							"",
							"",
							"",
							"function addition(a, b) {",
							"    console.log(a + b);",
							"}",
							"addition(10, 20);",
							"",
							"",
							"function minusSeven(num) {",
							"    return num - 7;",
							"}",
							"console.log(minusSeven(10));",
							"",
							"",
							"function timesFive(num) {",
							"    return num * 5;",
							"}",
							"console.log(timesFive(5));",
							"",
							"function testStrictNotEqal(val) {",
							"    if (val !== 17) {",
							"        return \"Not Equal\";",
							"    }",
							"    return \"Equal\";",
							"}",
							"console.log(testStrictNotEqal(10));",
							"",
							"",
							"function testSize(num) {",
							"    if (num < 5) {",
							"        return \"Tiny\"",
							"    } else if (num < 10) {",
							"        return \"small\"",
							"    } else if (num < 15) {",
							"        return \"Medium\"",
							"    } else if (num < 20) {",
							"        return \"Large\"",
							"    } else {",
							"        return \"Huge\"",
							"    }",
							"}",
							"console.log(testSize(20));",
							"",
							"",
							"function sequentialSize(val) {",
							"    var answer = \"\";",
							"    switch (val) {",
							"",
							"        case 1:",
							"        case 2:",
							"        case 3:",
							"            answer = \"Low\";",
							"            break;",
							"        case 4:",
							"        case 5:",
							"        case 6:",
							"            answer = \"Medium\";",
							"            break;",
							"        case 7:",
							"        case 8:",
							"        case 9:",
							"            answer = \"High\";",
							"            break;",
							"    }",
							"    return answer;",
							"}",
							"console.log(sequentialSize(4));",
							"",
							"",
							"var abc = \"hAHAHAHA\";",
							"var ace = \"heheheh\";",
							"abc += ace;",
							"console.log(abc);",
							"",
							"",
							"var firstNameLength = 0;",
							"var firstName = \"Ajmal\";",
							"firstNameLength = firstName.length;",
							"console.log(firstNameLength);",
							"",
							"var abc = \"Jello World\";",
							"abc[0] = \"H\";",
							"console.log(abc);",
							"",
							"var def = \"Hello World\";",
							"def[0] = \"H\";",
							"console.log(def);",
							"",
							"var firstName = \"Khan\";",
							"var firstLetterOffirstName = firstName[1];",
							"var lastletterOffirstName = firstName[firstName.length - 1];",
							"console.log(firstLetterOffirstName);",
							"console.log(lastletterOffirstName);",
							"",
							"",
							"//May 30, 2020",
							"",
							"//do while loop:",
							"var xyz = [];",
							"var i = 10;",
							"do {",
							"    xyz.push(i);",
							"    i++;",
							"}",
							"while (i < 5) console.log(i, xyz);",
							"",
							"//while loop:",
							"var xyz = [];",
							"var i = 0;",
							"while (i < 5) {",
							"    xyz.push(i);",
							"    i++;",
							"} console.log(xyz);",
							"",
							"",
							"//while loop:",
							"var xyz = [];",
							"var i = 0;",
							"while (i < 5) {",
							"    xyz.push(i);",
							"    i++;",
							"} console.log(xyz);",
							"",
							"//for loop:",
							"var xyz = [];",
							"for (var i = 0; i < 5; i++) {",
							"    xyz.push(i);",
							"} console.log(xyz);",
							"",
							"//odd for loop:",
							"var xyz = [];",
							"for (var i = 1; i < 10; i += 2) {",
							"    xyz.push(i);",
							"} console.log(xyz);",
							"",
							"//for loop reverse: ",
							"var xyz = [];",
							"for (var i = 5; i > 0; i--) {",
							"    xyz.push(i);",
							"} console.log(xyz);",
							"",
							"//even for loop reverse: ",
							"var xyz = [];",
							"for (var i = 10; i > 0; i -= 2) {",
							"    xyz.push(i);",
							"} console.log(xyz);",
							"",
							"//odd for loop reverse: ",
							"var xyz = [];",
							"for (var i = 9; i > 0; i -= 2) {",
							"    xyz.push(i);",
							"} console.log(xyz);",
							"",
							"===========================================",
							"field and value",
							"",
							"pm.test(\"Body Matches\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"pracId\":\"4976500\"');",
							"})",
							"",
							"==========================================",
							"include",
							"pm.test(\"Body Matches\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"pracId\");",
							"})",
							"",
							"=========================================",
							"Contains - AuditTime",
							"pm.test(\"audit time equals\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.updateTime).to.contain(\"2021-06-11\");",
							"   ",
							"});",
							"",
							"=========================================",
							"Body Has",
							"tests[\"body has Npi\"] = responseBody.has(data.Npi);",
							"tests[\"body has pracId\"] = responseBody.has(data.PRAC_ID);",
							"tests[\"body has phyId\"] = responseBody.has(data.phyId);",
							"tests[\"body has amisysNumber\"] = responseBody.has(data.amisysNum);",
							"",
							"========================================",
							"responseTime",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"========================================",
							"Console ",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);});",
							"",
							"pm.test(\"Key\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"Key\"));",
							"    pm.expect(pm.response.text()).to.include(data.Key);",
							"    console.log(\"Key to be sent: \" + data[\"Key\"]);});",
							"",
							"pm.test(\"Location\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"Location\"));",
							"    pm.expect(pm.response.text()).to.include(data.location);",
							"    console.log(\"Location to be sent: \" + data[\"Location\"]);});",
							"    ",
							"pm.test(\"Value\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"Value\"));",
							"    pm.expect(pm.response.text()).to.include(data.value);",
							"    console.log(\"Value to be sent: \" + data[\"Value\"]);});",
							"",
							"======================================",
							"FHIR",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});});",
							"",
							"",
							"pm.test(\"audit time equals\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.meta.lastUpdated).to.contain(\"2021-06-12\");",
							"   });",
							"   ",
							"pm.test(\"audit time equals\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.meta.lastUpdated).to.not.equals(\"2021-06-12\");",
							"   });",
							"",
							"",
							"==============================================================",
							"Date",
							"",
							"pm.test(\"termReasonDescription Value\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    console.log(jsonData.homeCommunityBasedServices[0].endDate);",
							"    ",
							"    pm.expect(jsonData.homeCommunityBasedServices[0].endDate).to.be.gte(\"2030-08-01T00:00:00.000Z\")",
							"    ",
							"});",
							"",
							"==================================================================",
							"Date Greater Than",
							"",
							"pm.test(\"homeCommunityBasedServices endDate greater than 2020-08-01\", () => {",
							"    let date,",
							"        isoFormatDate,",
							"        a = new Date('2020-08-01T00:00:00.000Z').getTime();",
							"           var jsonData = pm.response.json();",
							"",
							"        date = jsonData.homeCommunityBasedServices[0].endDate;",
							"",
							"        isoFormatDate = new Date(Date.parse(date)).getTime(); // Converting to integer from date format",
							"",
							"        pm.expect(isoFormatDate).to.above(a);",
							"    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "URL",
						"value": "{{URL}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authorization}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/v2/practitioner/4516415/location/5533839?select=locations.practitionerNetworkCycle.network.agreement",
					"host": [
						"{{URL}}"
					],
					"path": [
						"",
						"v2",
						"practitioner",
						"4516415",
						"location",
						"5533839"
					],
					"query": [
						{
							"key": "select",
							"value": "locations.practitionerNetworkCycle.network.agreement"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Reading Excel",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "63f4d9e8-9f7d-4bd6-8369-49e7f160faa9",
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a70bc0cf-b372-480f-acb6-bc7f741c45d1",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);});",
							"",
							"pm.test(\"Key\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"Key\"));",
							"    pm.expect(pm.response.text()).to.include(data.Key);",
							"    console.log(\"Key to be sent: \" + data[\"Key\"]);});",
							"",
							"pm.test(\"Location\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"Location\"));",
							"    pm.expect(pm.response.text()).to.include(data.location);",
							"    console.log(\"Location to be sent: \" + data[\"Location\"]);});",
							"    ",
							"pm.test(\"Value\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"Value\"));",
							"    pm.expect(pm.response.text()).to.include(data.value);",
							"    console.log(\"Value to be sent: \" + data[\"Value\"]);});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "URL",
						"value": "{{URL}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{Authorization}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/v2/practitioner/4516415/location/5533839?Key={{Key}}&Location={{Location}}&Value={{Value}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"",
						"v2",
						"practitioner",
						"4516415",
						"location",
						"5533839"
					],
					"query": [
						{
							"key": "Key",
							"value": "{{Key}}"
						},
						{
							"key": "Location",
							"value": "{{Location}}"
						},
						{
							"key": "Value",
							"value": "{{Value}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}